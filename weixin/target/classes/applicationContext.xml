<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <context:component-scan base-package="top.liyang024"/>
 	<context:component-scan base-package="controller"/>
	<task:annotation-driven />
    <!-- Sample RDBMS data source that would exist in any application - not Shiro related. -->
    <bean id="dataSourceShiro" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://47.94.218.215:3306/shiro"/>
<!--         <property name="url" value="jdbc:mysql://localhost:3306/shiro"/> -->
<!--         <property name="username" value="root"/> -->
<!--         <property name="password" value="root.2012"/> -->
        <property name="username" value="dlsc"/>
        <property name="password" value="dlsc3143"/>
    </bean>
    
    <!-- application datasource -->
    <bean id="dataSourceC3P0_MYSQL" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    	<property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://47.94.218.215:3306/neapp"/>
        <property name="user" value="dlsc"/>
        <property name="password" value="dlsc3143"/>
    </bean>
    <bean id="dataSourceC3P0_MYSQLSHIRO" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    	<property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://47.94.218.215:3306/shiro"/>
        <property name="user" value="dlsc"/>
        <property name="password" value="dlsc3143"/>
    </bean>
    <bean id="dataSourceC3P0_DM" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    	<property name="driverClass" value="dm.jdbc.driver.DmDriver"/>
        <property name="jdbcUrl" value="jdbc:dm://10.21.32.194:12345/NEPUBDB"/>
        <property name="user" value="NEPUBDB"/>
        <property name="password" value="NEPUBDB"/>
    </bean>
    <bean id="multipleDataSource" class="top.liyang024.base.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="dataSourceC3P0_MYSQL"/>
        <property name="targetDataSources">
            <map>
                <entry key="mySqlDataSource" value-ref="dataSourceC3P0_MYSQL"/>
                <entry key="mySqlShiroDataSource" value-ref="dataSourceC3P0_MYSQLSHIRO"/>
                <entry key="dmDataSource" value-ref="dataSourceC3P0_DM"/>
            </map>
        </property>
    </bean>
    <!-- transaction manager, use DataSourceTransactionManager" for JDBC local tx -->
<!--     <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
<!--         <property name="dataSource" ref="dataSourceC3P0" /> -->
<!--     </bean> -->
    <!-- 开启基于注解的事务 -->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>
        <!-- define the SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="multipleDataSource" />
<!--         <property name="dataSource" ref="dataSourceC3P0_MYSQL" /> -->
<!--         <property name="configLocation" value="classpath:mybatis-config.xml"></property> -->
		<property name="mapperLocations" >
			<array>
				<value>classpath:mybatis/mapper/**/*.xml</value>
			</array>
		</property>
    </bean>
    
    <!-- scan for mappers and let them be autowired 指定mapper接口的包名-->
    <mybatis-spring:scan base-package="com.kedong" />
    <mybatis-spring:scan base-package="com.atguigu" />


<!--     Simulated business-tier "Manager", not Shiro related, just an example -->
<!--     <bean id="sampleManager" class="org.apache.shiro.samples.spring.DefaultSampleManager"/> -->

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="jdbcRealm"/>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> 
    </bean>

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->

    <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="permissionsLookupEnabled" value="true"/>
        <property name="dataSource" ref="dataSourceShiro"/>
    </bean>

    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!-- 必须要有这样的实例，来管理spring容器当中shiro常见的对象 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!-- 启用shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
          <property name="proxyTargetClass" value="true"></property>
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
         with a Subject for security checks. -->
    <!-- 跟网络有关的配置 -->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/index.jsp"/>
        <property name="unauthorizedUrl" value="/DefaultAllControl.jsp"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /logon = anon
                /** = anon
            </value>
        </property>
    </bean>
</beans>
